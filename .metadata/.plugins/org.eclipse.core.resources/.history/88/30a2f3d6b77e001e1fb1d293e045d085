package com.SpringBatch.Config;

import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.data.RepositoryItemWriter;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.LineMapper;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.batch.item.file.mapping.DefaultLineMapper;
import org.springframework.batch.item.file.transform.DelimitedLineTokenizer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.FileSystemResource;

import com.SpringBatch.Repository.Customer_Repository;
import com.SpringBatch.entity.Customer;

@Configuration // this class is representative as batach processing.
@EnableBatchProcessing
public class BatchConfig {
	
	@Autowired
	private Customer_Repository  customerRepository; /// this is repository define by programmer.
	@Autowired
	private StepBuilderFactory stepBuilderFactory;  // this is define by spring boot
	@Autowired
	private JobBuilderFactory jobBuilderFactory;// this is define by spring boot
	
	// item reader bean   ### Step 1 reading the data from the csv file.
	
	@Bean
	public FlatFileItemReader<Customer> customerReader(){
		
		FlatFileItemReader<Customer> itemReader = new FlatFileItemReader<>();
		itemReader.setResource(new FileSystemResource("src/main/resource/customers.csv"));
		itemReader.setName("customer-item-read");
		itemReader.setLinesToSkip(1);
		itemReader.setLineMapper(lineMapper());  // after this line it sugget to create the method. of linemapper.
		// it used to map the data to customer object mean from csv to entity.
		return itemReader;
		
	}

	private LineMapper<Customer> lineMapper() {
		
		DefaultLineMapper<Customer> lineMapper = new DefaultLineMapper<Customer>();
		DelimitedLineTokenizer lineTokenizer = new DelimitedLineTokenizer();
		lineTokenizer.setDelimiter(","); // this lines mean every data should separate by comma.
		lineTokenizer.setStrict(false); // this mean any value in csv that is empty that should consider null;
		lineTokenizer.setNames("id","firstName","lastName","email", "gender", "contactNo","country","dob");
		
		BeanWrapperFieldSetMapper<Customer> fieldSetMapper = new BeanWrapperFieldSetMapper<>();
		fieldSetMapper.setTargetType(Customer.class);
		
		lineMapper.setFieldSetMapper(fieldSetMapper);
		lineMapper.setLineTokenizer(lineTokenizer);
		
		return lineMapper;
		
	}
	//### Step 2  processig the data after we read the data from the csv file.

	// item processor bean  this is taken from another class where we process the data
	@Bean  // this is deifine by us because processing logic goes here sample have been created and commented 
	public CustomerProcessor customerProcessor() {
		
		return new CustomerProcessor();
		
	}
	
	
	// ### Step 3  Write  the data in to the databse after processign is done.
	
	// item writer bean   // this is predefine class writer.
	@Bean
	public RepositoryItemWriter<Customer> customerWriter(){
		
		RepositoryItemWriter<Customer> itemWriter = new RepositoryItemWriter<>();
		itemWriter.setRepository(customerRepository);
		itemWriter.setMethodName("save"); // save is pre define method to save the data in to the database.
		return itemWriter;
		
	}
	
	//### Step 4  step bean  is used to return step object. .
	// step bean  
	@Bean
	public Step step() {
		
		return step;
		
	}
	
	
	
	// job bean

}
